<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>宽度优先搜索（BFS）</title>
    <link href="/2024/10/20/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88BFS%EF%BC%89/"/>
    <url>/2024/10/20/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88BFS%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>BFS（宽度优先搜索 Breadth-First Search）是一种用于图的遍历或搜索的算法。它从一个节点开始，逐层遍历图中的所有节点。BFS通常用队列来实现，因为它需要按照节点的发现顺序来访问它们。</p><p>BFS的工作原理可以总结为以下几个步骤：</p><ol><li>循环：只要队列不为空，就执行以下操作：</li><li>出队一个节点（我们称之为当前节点）。</li><li>访问当前节点的所有未访问的邻居节点。</li><li>将每个未访问的邻居节点标记为已访问，并将其入队。</li></ol><p>BFS算法的特点包括：</p><ol><li>层级遍历：它按层级顺序访问节点，这意味着它会先访问所有与源节点相邻的节点，然后是那些节点的邻居，以此类推。</li><li>最短路径：在无权图中，BFS可以找到从源节点到其他任何节点的最短路径。</li><li>时间复杂度：对于有V个顶点和E条边的图，BFS的时间复杂度是O(V+E)。</li><li>空间复杂度：在最坏的情况下，BFS可能需要O(V)的空间来存储所有节点的访问状态。</li></ol><p>下面进行进行图示演示：</p><img src="/.com//10/20/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88BFS%EF%BC%89/bfs_1.png" class>]]></content>
    
    
    
    <tags>
      
      <tag>算法——基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度优先搜索（DFS）</title>
    <link href="/2024/10/19/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88DFS%EF%BC%89/"/>
    <url>/2024/10/19/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88DFS%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>DFS（深度优先搜索，Depth-First Search）是一种用于遍历或搜索树或图的算法。<br>它从一个节点开始，尽可能深地搜索树的分支，直到到达叶子节点（没有子节点的节点），然后回溯到上一个节点，继续搜索其他分支。<br>这个过程会一直进行，直到所有可能的分支都被探索完毕。</p><p>DFS的工作原理可以总结为以下几个步骤：</p><ol><li>选择一个起始节点：从树或图的某个节点开始。</li><li>探索尽可能深的分支：从当前节点开始，选择一个未被访问过的邻接节点，然后递归地在该节点上执行DFS。</li><li>回溯：当当前节点的所有邻接节点都被访问过，或者到达了叶子节点时，回溯到上一个节点。</li><li>重复：重复步骤2和3，直到所有节点都被访问过。</li></ol><p>DFS的特点包括：</p><ol><li>栈的使用：在实现DFS时，通常使用栈数据结构来存储节点。在递归实现中，调用栈隐式地充当了栈的角色。</li><li>时间复杂度：对于有V个顶点和E条边的图，DFS的时间复杂度通常是O(V + E)。</li><li>空间复杂度：在最坏的情况下，DFS的空间复杂度也是O(V)，因为可能需要存储整个路径上的节点。</li><li>路径搜索：DFS非常适合于寻找从起点到终点的路径，尤其是在图不是非常大的情况下。</li><li>连通性问题：DFS可以用来检测图的连通性，例如，检查一个图是否是强连通的。</li></ol><p>下面是一个简单的图示：<br><br><br><br><br>节点1为根节点，也叫起始节点</p><img src="/.com//10/19/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88DFS%EF%BC%89/1.png" class><br>那么节点1向下遍历，直到遍历到第一个没有子节点的节点4<img src="/.com//10/19/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88DFS%EF%BC%89/2.png" class>因为4已经没有子节点，已经是叶子节点，所以无法再向下遍历，所以回溯到上一个它的父节点3，并对节点4作标记，节点3接着向下遍历未被标记的子节点5<img src="/.com//10/19/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88DFS%EF%BC%89/3.png" class>因为5同样是叶子节点，遍历有到达了最深层，所以继续回溯到父节点3，同时标记5，我们发现3也没有未被标记的子节点了，无法再向下遍历，那么3接着向上回溯到父节点2，同时对3作标记，继续遍历2的未被标记的子节点6<br><br>接下来过程：2→6→7，节点7向上回溯到6并标记,节点6向下遍历子节点:6→8,然后连续向上回溯 8→6→2→1 直到回溯到根节点1,发现有可以向下遍历的子节点<img src="/.com//10/19/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88DFS%EF%BC%89/4.png" class>接着按照上述模式进行剩余的遍历，完成整张图的遍历，图的序号即为遍历的顺序<img src="/.com//10/19/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88DFS%EF%BC%89/5.png" class><br><p>这是luogu上一道搜索的例题 <a href="https://www.luogu.com.cn/problem/P1443">https://www.luogu.com.cn/problem/P1443</a><br>接着给出示例代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span> <span class="hljs-comment">//万能头文件 </span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <span class="hljs-comment">//引用stl库 </span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1000009</span>; <span class="hljs-comment">//定义一个大数 </span><br><span class="hljs-type">bool</span> is[<span class="hljs-number">401</span>][<span class="hljs-number">401</span>]; <span class="hljs-comment">//对一个点(i,j)标记是否已经遍历过 </span><br><span class="hljs-type">int</span> num[<span class="hljs-number">401</span>][<span class="hljs-number">401</span>]; <span class="hljs-comment">//存储起始点(x,y)到每个点(i,j)的距离 </span><br><span class="hljs-type">int</span> n,m,begin_x,begin_y;<br><span class="hljs-type">int</span> move_x[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-2</span>&#125;;<br><span class="hljs-type">int</span> move_y[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;; <br><span class="hljs-comment">//马的八种移动方式对应的(x,y)坐标的变化 </span><br></code></pre></td></tr></table></figure><p>初始工作</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span>&#123;<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;begin_x&gt;&gt;begin_y;<br>memset(<span class="hljs-keyword">is</span>,<span class="hljs-literal">true</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">is</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)num[i][j] = MAXN;<br>dfs(begin_x,begin_y,<span class="hljs-number">0</span>);<br>print();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>main函数的内容如上，初始化标记数组is,为全部未访问过，num[i][j]初始化为一个极大的数<br>dfs(int x,int y,int k)为一个递归函数 x,y:当前点位的横坐标; k:走到目前点位的步数<br>dfs(begin_x,begin_y,0) 即从初始点位开始dfs，步数为0（马到起始点的步数为0）</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gml">void dfs(int <span class="hljs-variable language_">x</span>,int <span class="hljs-variable language_">y</span>,int k)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">x</span> &lt;= <span class="hljs-number">0</span>||<span class="hljs-variable language_">y</span> &lt;= <span class="hljs-number">0</span>||num[<span class="hljs-variable language_">x</span>][<span class="hljs-variable language_">y</span>] &lt; k||<span class="hljs-variable language_">x</span> &gt; n || <span class="hljs-variable language_">y</span> &gt; m) <span class="hljs-keyword">return</span>; <br><span class="hljs-comment">//如果遍历到的坐标点不在方格图内 即超过了图的横纵坐标或者小于等于0（方格图横纵坐标范围为1~n,1~m） 回溯 </span><br><span class="hljs-comment">//num[x][y] &lt; k ： 如果该点位的答案已经小于现有步数，那么k已经超过了答案，没有必要进行 回溯 </span><br>num[<span class="hljs-variable language_">x</span>][<span class="hljs-variable language_">y</span>] = k;<br><span class="hljs-comment">//更新num[x][y] </span><br><span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span> ;i &lt; <span class="hljs-number">8</span>; i++) <span class="hljs-comment">//枚举八个走马后的可能坐标值 </span><br>&#123;<br>int tx = move_x[i] + <span class="hljs-variable language_">x</span>;<br>int ty = move_y[i] + <span class="hljs-variable language_">y</span>;<br><span class="hljs-comment">//(tx,ty) : 走马后的坐标 </span><br>is[<span class="hljs-variable language_">x</span>][<span class="hljs-variable language_">y</span>] = <span class="hljs-symbol">false</span>; <br>dfs(tx,ty,k + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//向后遍历，步数加1，打标记，防止父子节点反复遍历死循环 </span><br>is[<span class="hljs-variable language_">x</span>][<span class="hljs-variable language_">y</span>] = <span class="hljs-symbol">true</span>; <span class="hljs-comment">//恢复标记，可以再次访问 </span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>dfs内容如上</p><p>接着我们需要对题目所要求的输出进行修改，有格式要求</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs abnf">void print()<br>&#123;<br>for(int i <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-comment">; i &lt;= n; i++)</span><br>&#123;<br>for(int j <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">; j &lt;= m; j++)</span><br>&#123;<br>if(num[i][j] <span class="hljs-operator">=</span><span class="hljs-operator">=</span> MAXN) cout&lt;&lt;<span class="hljs-string">&quot;-1    &quot;</span><span class="hljs-comment">;</span><br>else cout&lt;&lt;num[i][j]&lt;&lt;<span class="hljs-string">&quot;    &quot;</span><span class="hljs-comment">;</span><br>&#125;<br>cout&lt;&lt;endl<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然你也可以采取下面修改场宽的方式进行所要求格式的输出</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-5d&quot;</span>,<span class="hljs-built_in">num</span>[i][j]);<br></code></pre></td></tr></table></figure><p>全部代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> namespace std;<br>const <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1000009</span>;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">is</span>[<span class="hljs-number">401</span>][<span class="hljs-number">401</span>];<br><span class="hljs-type">int</span> num[<span class="hljs-number">401</span>][<span class="hljs-number">401</span>];<br><span class="hljs-type">int</span> n,m,begin_x,begin_y;<br><span class="hljs-type">int</span> move_x[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-2</span>&#125;;<br><span class="hljs-type">int</span> move_y[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;; <br><span class="hljs-type">void</span> dfs(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> k)<br>&#123;<br><span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">0</span>||y &lt;= <span class="hljs-number">0</span>||num[x][y] &lt; k||x &gt; n || y &gt; m) <span class="hljs-keyword">return</span>;<br>num[x][y] = k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ;i &lt; <span class="hljs-number">8</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> tx = move_x[i] + x;<br><span class="hljs-type">int</span> ty = move_y[i] + y;<br><span class="hljs-keyword">is</span>[x][y] = <span class="hljs-keyword">false</span>;<br>dfs(tx,ty,k + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">is</span>[x][y] = <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> print()<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>&#123;<br><span class="hljs-keyword">if</span>(num[i][j] == MAXN) cout&lt;&lt;&quot;-1    &quot;;<br><span class="hljs-keyword">else</span> cout&lt;&lt;num[i][j]&lt;&lt;&quot;    &quot;;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> main()&#123;<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;begin_x&gt;&gt;begin_y;<br>memset(<span class="hljs-keyword">is</span>,<span class="hljs-keyword">true</span>,sizeof(<span class="hljs-keyword">is</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)num[i][j] = MAXN;<br>dfs(begin_x,begin_y,<span class="hljs-number">0</span>);<br>print();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在代码中，DFS被用来计算从起点开始，到达每个位置所需的最少移动次数。虽然最终结果可能是正确的，但由于DFS的递归性质，它可能会导致大量的函数调用开销，并且可能会在没有找到更优解的情况下继续深入搜索，从而导致效率较低。</p><p>接下来 将引入在这个场景下更为合适的另一种搜索方法，宽（广）度优先搜索（BFS）</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法——基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
